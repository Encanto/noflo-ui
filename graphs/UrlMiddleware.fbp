# @runtime noflo-browser
# @icon slack
INPORT=Dispatch.IN:IN
OUTPORT=Passed.OUT:PASS
OUTPORT=NewActions.OUT:NEW

'noflo:ready,storage:ready,application:redirect,application:hash,application:sethash,application:recreatestate' -> ROUTES Dispatch(ui/DispatchAction)
Dispatch PASS -> IN Passed(core/Repeat)

# New actions generated by this middleware
'application:url' -> ACTION ApplicationUrlAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'application:redirect' -> ACTION ApplicationRedirectAction(ui/SetAction) OUT -> IN NewActions
'application:hash' -> ACTION ApplicationHashAction(ui/SetAction) OUT -> IN NewActions

# Application start-up
Dispatch HANDLE[0] -> IN NofloReady(core/Split)
NofloReady OUT -> IN Passed
NofloReady OUT -> IN InitialURL(ui/GetUrl)
# Send application URL out
InitialURL OUT -> ApplicationUrlAction
ListenHash INITIAL -> IN ApplicationHashAction
ListenHash CHANGE -> IN ApplicationHashAction

# Subscribe to hash changes and generate new actions
Dispatch HANDLE[1] -> IN SplitReady(core/Split)
SplitReady OUT -> IN Async(core/RepeatAsync) OUT -> START ListenHash(interaction/ListenHash)
SplitReady OUT -> IN Passed

# URL redirection. Changes URL and as side-effect stops app
Dispatch HANDLE[2] -> IN Redirect(ui/SetUrl)

# Convert URL hashes to actions
Dispatch HANDLE[3] -> IN HashToAction(ui/Router)
HashToAction ROUTE -> IN NewActions
# Allow router to redirect as well
HashToAction REDIRECT -> IN ApplicationRedirectAction

# URL hash redirection
Dispatch HANDLE[4] -> IN SetUrlHash(ui/SetUrlHash)

# Re-send current hash to trigger state re-creation
Dispatch HANDLE[5] -> IN SendCurrentHash(ui/SendCurrentHash)
SendCurrentHash OUT -> IN ApplicationHashAction
