# @runtime noflo-browser
# @icon github

INPORT=Dispatch.IN:IN
OUTPORT=Dispatch.PASS:PASS
OUTPORT=NewActions.OUT:NEW

'github:open,github:gist,github:sync:prepare,github:sync:synchronize,github:sync:pull' -> ROUTES Dispatch(ui/DispatchAction)

# New actions generated by this middleware
'application:sethash' -> ACTION ApplicationRedirectAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'main:open' -> ACTION OpenMainAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:save:graph' -> ACTION SaveGraphAction(ui/SetAction) OUT -> IN NewActions
'storage:save:component' -> ACTION SaveComponentAction(ui/SetAction) OUT -> IN NewActions
'storage:save:spec' -> ACTION SaveSpecAction(ui/SetAction) OUT -> IN NewActions
'storage:save:project' -> ACTION SaveProjectAction(ui/SetAction) OUT -> IN NewActions
'github:sync:pull' -> ACTION GithubPullAction(ui/SetAction) OUT -> IN NewActions
'github:operation' -> ACTION GithubOperationAction(ui/SetAction) OUT -> IN NewActions
'github:loading' -> ACTION GithubLoadingAction(ui/SetAction) OUT -> IN NewActions
'github:ready' -> ACTION GithubReadyAction(ui/SetAction) OUT -> IN NewActions
'github:error' -> ACTION ErrorAction(ui/SetAction) OUT -> IN NewActions

# Downloading a GitHub project
Dispatch HANDLE[0] -> IN CheckRepo(ui/CheckRepoExists)
# If it already exists, redirect
CheckRepo EXISTING -> IN ApplicationRedirectAction
# If not, pull as a new project
CheckRepo OPENMAIN -> IN OpenMainAction
CheckRepo NEW -> IN GithubPullAction

# Downloading a gist example
# First check if we already have a local version of the gist
Dispatch HANDLE[1] -> IN CheckGist(ui/CheckGistExists)
# If it already exists, redirect
CheckGist EXISTING -> IN ApplicationRedirectAction
# If not, download as new project
CheckGist NEW -> IN GetGistToken(ui/GetUserToken)
'1' -> LIMIT GetGistToken
GetGistToken TOKEN -> TOKEN GetGist(ui/GistToProject)
GetGistToken OUT -> IN GithubLoadingAction
GetGistToken OUT -> IN GetGist
GetGistToken ERROR -> IN ErrorAction
GetGist GRAPH -> IN SaveGraphAction
GetGist COMPONENT -> IN SaveComponentAction
GetGist PROJECT -> IN GithubReadyAction
GetGist PROJECT -> IN SaveProjectAction
GetGist ERROR -> IN ErrorAction

# Preparing to synchronize with GitHub
Dispatch HANDLE[2] -> IN GetPrepareToken(ui/GetUserToken)
GetPrepareToken TOKEN -> TOKEN GithubSynchronization(ui/GithubSynchronization)
GetPrepareToken OUT -> IN GithubLoadingAction
GetPrepareToken OUT -> PREPARE GithubSynchronization
GetPrepareToken ERROR -> IN ErrorAction
GithubSynchronization OPERATION -> IN GithubReadyAction
GithubSynchronization OPERATION -> IN GithubOperationAction
GithubSynchronization ERROR -> IN ErrorAction

# Two-way GitHub synchronization
Dispatch HANDLE[3] -> IN GetSyncToken(ui/GetUserToken)
GetSyncToken TOKEN -> TOKEN GithubSynchronization
GetSyncToken OUT -> SYNC GithubSynchronization
GetSyncToken ERROR -> IN ErrorAction
GithubSynchronization GRAPH -> IN SaveGraphAction
GithubSynchronization COMPONENT -> IN SaveComponentAction
GithubSynchronization SPEC -> IN SaveSpecAction
GithubSynchronization PROJECT -> IN SaveProjectAction
GithubSynchronization LOADING -> IN GithubLoadingAction
GithubSynchronization READY -> IN GithubReadyAction

# Pulling a GitHub project
Dispatch HANDLE[4] -> IN GetPullToken(ui/GetUserToken)
GetPullToken TOKEN -> TOKEN GithubSynchronization
GetPullToken OUT -> PULL GithubSynchronization
GetPullToken ERROR -> IN ErrorAction
